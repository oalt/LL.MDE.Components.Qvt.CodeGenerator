// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 17.0.0.0
//  
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code neu generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace LL.MDE.Components.Qvt.CodeGenerator.CodeGeneration.RelationTemplate
{
    using LL.MDE.Components.Qvt.Common;
    using LL.MDE.Components.Qvt.CodeGenerator.Analysis;
    using LL.MDE.Components.Qvt.CodeGenerator.CodeGeneration;
    using LL.MDE.Components.Qvt.CodeGenerator.CodeGeneration.RelationTemplate;
    using System.Collections.Generic;
    using System.Linq;
    using LL.MDE.Components.Qvt.Metamodel.EMOF;
    using LL.MDE.Components.Qvt.Metamodel.EssentialOCL;
    using LL.MDE.Components.Qvt.Metamodel.QVTBase;
    using LL.MDE.Components.Qvt.Metamodel.QVTRelation;
    using LL.MDE.Components.Qvt.Metamodel.QVTTemplate;
    using LL.MDE.Components.Qvt.Metamodel.CustomExtensions.EMOFExtensions;
    using LL.MDE.Components.Qvt.CodeGenerator.Utils;
    using NMF.Utilities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class RelationMainTemplate : RelationMainTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// generated code \r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Sys" +
                    "tem.Linq;\r\nusing LL.MDE.Components.Qvt.Common;\r\n");
            
            #line 20 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"

    // Generating of the "usings", for each package of each metamodel used in the transformation
    foreach (IPackage package in relation.Transformation.ModelParameter.Select(p => p.UsedPackage).SelectMany(i => i).Distinct())
    {

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 25 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(package.Name));
            
            #line default
            #line hidden
            this.Write(".Extensions;\r\n");
            
            #line 26 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"

    } // foreach
    
    // Generation of the namespace 

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 32 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.Namespace(relation.Transformation)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 34 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
 
    // Generation of the Relation class

            
            #line default
            #line hidden
            this.Write("    public class ");
            
            #line 37 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationClassName(relation)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 39 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"

	if (useMetamodelInterface)
	{

            
            #line default
            #line hidden
            this.Write("        private readonly ");
            
            #line 43 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameof(IMetaModelInterface)));
            
            #line default
            #line hidden
            this.Write(" editor;\r\n");
            
            #line 44 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
  
     }

            
            #line default
            #line hidden
            this.Write(" \r\n        private readonly ");
            
            #line 47 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.TransformationName(relation.Transformation)));
            
            #line default
            #line hidden
            this.Write(" transformation;\r\n\r\n        // Constructor\r\n\t\tpublic ");
            
            #line 50 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationClassName(relation)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 50 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(useMetamodelInterface ? nameof(IMetaModelInterface) + " editor," : ""));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 50 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.TransformationName(relation.Transformation)));
            
            #line default
            #line hidden
            this.Write(" transformation) \r\n        {\r\n");
            
            #line 52 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"

		if (useMetamodelInterface)
		{ 

            
            #line default
            #line hidden
            this.Write("            this.editor = editor;\r\n");
            
            #line 57 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
 
        } 

            
            #line default
            #line hidden
            this.Write("            this.transformation = transformation;\r\n        }\r\n\r\n");
            
            #line 63 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"


    // Generation of the Match class specific for this relation
    GenerateMatchClasses(relation, analysisResult); 

	// Generation of the input/output classes specific to this relation
    GenerateDictionnaryClasses(relation);

	// Generation of the traceability map

            
            #line default
            #line hidden
            this.Write("\r\n        // traceability map\r\n        private readonly Dictionary<CheckOnlyDomai" +
                    "ns, EnforceDomains> traceabilityMap = new Dictionary<CheckOnlyDomains, EnforceDo" +
                    "mains>();\r\n\r\n");
            
            #line 77 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"



	// Generation of a method to try to find previous results (used for when clauses)
    GenerateFindPreviousResultMethod(relation);
	
    // For each checkonly domain of the relation, we generate a "partial check" method
    // It finds all the matches without looking outside
    foreach (IRelationDomain domain in relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)))
    {

            
            #line default
            #line hidden
            this.Write("        // check method for domain ");
            
            #line 88 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(domain));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 89 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"

        GenerateDomainCheckMethod(domain, analysisResult.GetResultOf(domain));
    }

    GenerateCheckAndEnforceMethod(relation);


            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n        // Check method\r\n");
            
            #line 100 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationMainTemplate.tt"

    // Then we have an operation which will try to match the partial checks all together
    GenerateCheckMethod(relation, analysisResult);

    // For each transfo target we generate enforce method
    foreach (ITypedModel targetParam in analysisResult.DirectionsThatCanBeEnforced)
    {
        GenerateEnforceDomainMethods(relation, targetParam, analysisResult, useMetamodelInterface);
    }

    GenerateEnforceMethod(relation, analysisResult, useMetamodelInterface);

            
            #line default
            #line hidden
            this.Write("\r\n    } // end class\r\n\r\n} // end namespace\r\n\r\n\r\n\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 16 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

// ************************************************************************************************************************
    public void GenerateDictionnaryClass(IRelation relation, IList<IRelationDomain> domains, bool checkOnly)
    {
        string dictTypes = string.Join(",", domains.Select(d => d.RootVariable.Type.GetRealTypeName()));

        string className = checkOnly ? "CheckOnlyDomains" : "EnforceDomains";

        
        #line default
        #line hidden
        
        #line 23 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n        // dictionary class\r\n        public class ");

        
        #line default
        #line hidden
        
        #line 26 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 26 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" : Tuple<");

        
        #line default
        #line hidden
        
        #line 26 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dictTypes));

        
        #line default
        #line hidden
        
        #line 26 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(">\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 28 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
 

		foreach (IRelationDomain dictVariable in domains)
		{

        
        #line default
        #line hidden
        
        #line 32 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            public ");

        
        #line default
        #line hidden
        
        #line 33 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dictVariable.RootVariable.Type.GetRealTypeName()));

        
        #line default
        #line hidden
        
        #line 33 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 33 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(dictVariable.RootVariable.Name));

        
        #line default
        #line hidden
        
        #line 33 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("  \r\n            {\r\n                get\r\n                {\r\n                    re" +
        "turn Item");

        
        #line default
        #line hidden
        
        #line 37 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domains.IndexOf(dictVariable) + 1));

        
        #line default
        #line hidden
        
        #line 37 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(";\r\n                }\r\n            }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 41 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

		}
        RelationTemplateHelper.GenerateRelationParams(true, relation, null, true, false);
        string paramsWithType = string.Join(",",domains.Select(d => d.RootVariable.Type.GetRealTypeName() + " " + d.RootVariable.Name));
        string paramsWithoutType = string.Join(",",domains.Select(d => d.RootVariable.Name));
		// generate constructor

        
        #line default
        #line hidden
        
        #line 47 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            public ");

        
        #line default
        #line hidden
        
        #line 48 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 48 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 48 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(paramsWithType));

        
        #line default
        #line hidden
        
        #line 48 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(") : base(");

        
        #line default
        #line hidden
        
        #line 48 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(paramsWithoutType));

        
        #line default
        #line hidden
        
        #line 48 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n            {\r\n            }\r\n        }\r\n");

        
        #line default
        #line hidden
        
        #line 52 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

    } // end method

// ************************************************************************************************************************

    public void GenerateDictionnaryClasses(IRelation relation)
    {
        IList<IRelationDomain> dictVariableCheck = relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault()).ToList();
        IList<IRelationDomain> dictVariablesEnforce = relation.Domain.OfType<IRelationDomain>().Where(d => d.IsEnforceable.GetValueOrDefault()).ToList();
        GenerateDictionnaryClass(relation, dictVariableCheck, true);
        GenerateDictionnaryClass(relation, dictVariablesEnforce, false);
    }

// ************************************************************************************************************************

    public void GenerateFindPreviousResultMethod(IRelation relation)
    {

        
        #line default
        #line hidden
        
        #line 69 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        public EnforceDomains FindPreviousResult(");

        
        #line default
        #line hidden
        
        #line 70 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsCheckonly(true,relation)));

        
        #line default
        #line hidden
        
        #line 70 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n        {\r\n            CheckOnlyDomains input = new CheckOnlyDomains(");

        
        #line default
        #line hidden
        
        #line 72 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsCheckonly(false,relation)));

        
        #line default
        #line hidden
        
        #line 72 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(");\r\n            return traceabilityMap.ContainsKey(input) ? traceabilityMap[input" +
        "] : null;\r\n        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 76 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

    } // end method

// ************************************************************************************************************************

    public void GenerateMatchClasses(IRelation relation, RelationAnalysisResult analysisResult)
    {
        foreach (IRelationDomain domain in relation.Domain.OfType<IRelationDomain>().Where(d => d.TypedModel != null))
        {
            DomainVariablesBindingsResult domainAnalysisResult = analysisResult.GetResultOf(domain);

            // Domain match Class declaration

        
        #line default
        #line hidden
        
        #line 88 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        // match class\r\n        internal class ");

        
        #line default
        #line hidden
        
        #line 90 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(domain)));

        
        #line default
        #line hidden
        
        #line 90 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" \r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 92 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
		
		foreach (IVariable variableItCanBind in domainAnalysisResult.VariablesItCanBind)
		{

        
        #line default
        #line hidden
        
        #line 95 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            public ");

        
        #line default
        #line hidden
        
        #line 96 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variableItCanBind.Type.GetRealTypeName()));

        
        #line default
        #line hidden
        
        #line 96 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 96 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variableItCanBind.Name));

        
        #line default
        #line hidden
        
        #line 96 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 97 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	    } // foreach

        
        #line default
        #line hidden
        
        #line 99 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 102 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

			}

        // Check result Class declaration

        
        #line default
        #line hidden
        
        #line 106 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        internal class ");

        
        #line default
        #line hidden
        
        #line 107 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 107 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("  \r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 109 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"


		foreach (IRelationDomain domain in relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)))
		{

        
        #line default
        #line hidden
        
        #line 113 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            public ");

        
        #line default
        #line hidden
        
        #line 114 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(domain)));

        
        #line default
        #line hidden
        
        #line 114 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" matchDomain");

        
        #line default
        #line hidden
        
        #line 114 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Util.ToFirstUpper(domain.RootVariable.Name)));

        
        #line default
        #line hidden
        
        #line 114 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 115 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

		} // foreach


        
        #line default
        #line hidden
        
        #line 118 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        }\r\n");

        
        #line default
        #line hidden
        
        #line 120 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

    } // end method

// ************************************************************************************************************************

	public void GenerateDomainCheckMethod(IRelationDomain domain, DomainVariablesBindingsResult analysisResult)
	{ 
	    ISet<IVariable> bindedSoFar = new HashSet<IVariable>();

        
        #line default
        #line hidden
        
        #line 128 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        // DomainCheckMethod\r\n        internal static ISet<");

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(domain)));

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> ");

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckDomainMethodName(domain)));

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domain.RootVariable.Type.GetRealTypeName()));

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(domain.RootVariable.Name));

        
        #line default
        #line hidden
        
        #line 130 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n        {\r\n            ISet<");

        
        #line default
        #line hidden
        
        #line 132 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(domain)));

        
        #line default
        #line hidden
        
        #line 132 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> result = new HashSet<");

        
        #line default
        #line hidden
        
        #line 132 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(domain)));

        
        #line default
        #line hidden
        
        #line 132 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(">();\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 134 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateDomainCheckMethodContent(domain, bindedSoFar, analysisResult, indentTabs: 3)));

        
        #line default
        #line hidden
        
        #line 134 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n\r\n            return result;\r\n        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 139 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	} // end method

// ************************************************************************************************************************

	public void GenerateEnforceDomainMethods(IRelation relation, ITypedModel targetParam, RelationAnalysisResult analysisResult, bool useMetamodelInterface)
	{
	    List<IRelationDomain> targetDomains = relation.Domain.Where(d => d.IsEnforceable.GetValueOrDefault() && d.TypedModel == targetParam).OfType<IRelationDomain>().ToList();
		List<IRelationDomain> sourceDomains = relation.Domain.Where(d => !targetDomains.Contains(d)).OfType<IRelationDomain>().ToList();
		ISet<IVariable> bindedSoFar = new HashSet<IVariable>();
		  ISet<IRelationCallExp> relationCallsWhen = new HashSet<IRelationCallExp>();
		if (relation.When != null)
        {
            relationCallsWhen.AddRange(relation.When.Predicate.Select(p => p.ConditionExpression).OfType<IRelationCallExp>());
        }
	    foreach (IRelationDomain targetDomain in targetDomains)
	    {
	        DomainVariablesBindingsResult targetDomainAnalysisResult = analysisResult.GetResultOf(targetDomain);
			IList<string> args = new List<string>();
			args.AddRange(targetDomainAnalysisResult.VariablesRequired().Select(v => v.Type.GetRealTypeName() + " " + v.Name));
	        args.Add(targetDomain.RootVariable.Type.GetRealTypeName() + " " + targetDomain.RootVariable.Name);

        
        #line default
        #line hidden
        
        #line 160 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        internal ");

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.EnforceDomainMethodName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" checkresult, ");

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ",args )));

        
        #line default
        #line hidden
        
        #line 161 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n\t\t{\r\n            ");

        
        #line default
        #line hidden
        
        #line 163 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 163 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" result = new ");

        
        #line default
        #line hidden
        
        #line 163 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 163 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("();\r\n");

        
        #line default
        #line hidden
        
        #line 164 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

			foreach (IRelationDomain sourceDomain in sourceDomains.Where(d => d.TypedModel != null))
			{
				string bindingsContainer = "checkresult." + QvtCodeGeneratorStrings.MatchDomainFieldName(sourceDomain);

        
        #line default
        #line hidden
        
        #line 169 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(sourceDomain), bindedSoFar, bindingsContainer, true)));

        
        #line default
        #line hidden
        
        #line 169 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 170 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

			}

				
			// Generating calls to when relations, if needed
			if (!relationCallsWhen.IsNullOrEmpty())
			{

        
        #line default
        #line hidden
        
        #line 177 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                    // Querying when relations and storing results \r\n");

        
        #line default
        #line hidden
        
        #line 179 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

				foreach (IRelationCallExp relationCallWhen in relationCallsWhen)
				{

        
        #line default
        #line hidden
        
        #line 182 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                //var ");

        
        #line default
        #line hidden
        
        #line 183 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.RelationClassName(relationCallWhen.ReferredRelation)));

        
        #line default
        #line hidden
        
        #line 183 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("Result =  ");

        
        #line default
        #line hidden
        
        #line 183 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateAssignmentsFromRelationCall(relationCallWhen, useMetamodelInterface)));

        
        #line default
        #line hidden
        
        #line 183 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" ;\r\n");

        
        #line default
        #line hidden
        
        #line 184 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

                } // foreach
            } // if

			// TODO not construct objects when can be queried

        
        #line default
        #line hidden
        
        #line 189 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("           ");

        
        #line default
        #line hidden
        
        #line 190 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateConstructTarget(targetDomain, useMetamodelInterface)));

        
        #line default
        #line hidden
        
        #line 190 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n\r\n            // Return newly bound variables\r\n");

        
        #line default
        #line hidden
        
        #line 193 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	       foreach (IVariable variable in targetDomainAnalysisResult.VariablesItCanBind)
	       {

        
        #line default
        #line hidden
        
        #line 196 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            result.");

        
        #line default
        #line hidden
        
        #line 197 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variable.Name));

        
        #line default
        #line hidden
        
        #line 197 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("  = ");

        
        #line default
        #line hidden
        
        #line 197 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(variable.Name));

        
        #line default
        #line hidden
        
        #line 197 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("; \r\n");

        
        #line default
        #line hidden
        
        #line 198 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	       }

        
        #line default
        #line hidden
        
        #line 200 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n            return result;\r\n        }\r\n");

        
        #line default
        #line hidden
        
        #line 204 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	    }
	}  // end method

// ************************************************************************************************************************

    public void GenerateCheckAndEnforceMethod(IRelation relation)
    {
        // Method signature

        
        #line default
        #line hidden
        
        #line 213 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        ");

        
        #line default
        #line hidden
        
        #line 214 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(relation.IsTopLevel.GetValueOrDefault(false) ? "public" : "internal"));

        
        #line default
        #line hidden
        
        #line 214 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" void CheckAndEnforce(");

        
        #line default
        #line hidden
        
        #line 214 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", relation.Domain.Cast<RelationDomain>().Select(d => d.RootVariable.Type.GetRealTypeName() + " " + d.RootVariable.Name))));

        
        #line default
        #line hidden
        
        #line 214 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n        { \r\n");

        
        #line default
        #line hidden
        
        #line 216 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"


		IList<string> dictVariablesEnforce = relation.Domain.OfType<IRelationDomain>().Where(d => d.IsEnforceable.GetValueOrDefault()).Select(d=>d.RootVariable.Name).ToList();
		string enforceParams = string.Join(",",dictVariablesEnforce);
		
        
        #line default
        #line hidden
        
        #line 220 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" \r\n            CheckOnlyDomains input = new CheckOnlyDomains(");

        
        #line default
        #line hidden
        
        #line 221 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsCheckonly(false,relation)));

        
        #line default
        #line hidden
        
        #line 221 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(");\r\n            EnforceDomains output = new EnforceDomains(");

        
        #line default
        #line hidden
        
        #line 222 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(enforceParams));

        
        #line default
        #line hidden
        
        #line 222 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(@");
		    if (traceabilityMap.ContainsKey(input) && !traceabilityMap[input].Equals(output))
		    {
		        throw new Exception(""This relation has already been used with different enforced parameters!"");
		    }
		    if (!traceabilityMap.ContainsKey(input))
		    {
                ISet<");

        
        #line default
        #line hidden
        
        #line 229 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 229 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> result = ");

        
        #line default
        #line hidden
        
        #line 229 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckMethodName()));

        
        #line default
        #line hidden
        
        #line 229 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" (");

        
        #line default
        #line hidden
        
        #line 229 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsCheckonly(false, relation)));

        
        #line default
        #line hidden
        
        #line 229 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(");\r\n                Enforce(result, ");

        
        #line default
        #line hidden
        
        #line 230 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsEnforce(false, relation)));

        
        #line default
        #line hidden
        
        #line 230 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(");\r\n\t\t        traceabilityMap[input] = output;\r\n\t\t    }\r\n\t\t\t\r\n\t\t}");

        
        #line default
        #line hidden
        
        #line 234 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

    }

// ************************************************************************************************************************

    public void GenerateEnforceMethod(IRelation relation, RelationAnalysisResult analysisResult, bool useMetamodelInterface)
    {
        List<IRelationDomain> targetDomains = relation.Domain.Where(d => d.IsEnforceable.GetValueOrDefault()).OfType<IRelationDomain>().ToList();
        List<IRelationDomain> sourceDomains = relation.Domain.Where(d => !targetDomains.Contains(d)).OfType<IRelationDomain>().ToList();
        ISet<IVariable> bindedSoFar = new HashSet<IVariable>();
      
        // Method declaration

        
        #line default
        #line hidden
        
        #line 246 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n        internal void Enforce(ISet<");

        
        #line default
        #line hidden
        
        #line 248 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 248 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> result, ");

        
        #line default
        #line hidden
        
        #line 248 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsEnforce(true, relation, bindedSoFar)));

        
        #line default
        #line hidden
        
        #line 248 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n        {\r\n\r\n            foreach (");

        
        #line default
        #line hidden
        
        #line 251 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 251 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" match in result)\r\n            {\r\n                // Extracting variables bound i" +
        "n source domains\r\n");

        
        #line default
        #line hidden
        
        #line 254 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        // Generating the extraction of variables from the checking result
        foreach (IRelationDomain sourceDomain in sourceDomains)
        {
            string bindingsContainer = "match." + QvtCodeGeneratorStrings.MatchDomainFieldName(sourceDomain);

        
        #line default
        #line hidden
        
        #line 260 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(sourceDomain), bindedSoFar, bindingsContainer, false, 4)));

        
        #line default
        #line hidden
        
        #line 260 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 261 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        }



        // Generating assignments from where clause
        if (relation.Where != null)
        {

        
        #line default
        #line hidden
        
        #line 269 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" \r\n\r\n                // Assigning variables bound in the where clause\r\n");

        
        #line default
        #line hidden
        
        #line 272 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

            foreach (Assignment assignment in relation.Where.Predicate.Select(p => p.ConditionExpression).OfType<Assignment>())
            {

        
        #line default
        #line hidden
        
        #line 275 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("             ");

        
        #line default
        #line hidden
        
        #line 276 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture("            " + RelationTemplateHelper.GenerateExpression(assignment, useMetamodelInterface) + ";"));

        
        #line default
        #line hidden
        
        #line 276 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 277 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

            }
        }
        // Generating call to enforce methods of target domains

        
        #line default
        #line hidden
        
        #line 281 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" \r\n\r\n                // Enforcing each enforced domain\r\n");

        
        #line default
        #line hidden
        
        #line 284 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        foreach (IRelationDomain targetDomain in targetDomains)
        {
			
            DomainVariablesBindingsResult targetDomainAnalysisResult = analysisResult.GetResultOf(targetDomain);

			IList<string> args = new List<string>();
			args.AddRange(targetDomainAnalysisResult.VariablesRequired().Select(v=>v.Name));
	        args.Add(targetDomain.RootVariable.Name);


        
        #line default
        #line hidden
        
        #line 294 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                ");

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" target");

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.EnforceDomainMethodName(targetDomain)));

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("(match, ");

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",args)));

        
        #line default
        #line hidden
        
        #line 295 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 296 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        }

        // Generating variables extraction from the resulting target domains

        
        #line default
        #line hidden
        
        #line 300 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" \r\n\r\n                // Retrieving variables bound in the enforced domains\r\n");

        
        #line default
        #line hidden
        
        #line 303 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        foreach (IRelationDomain targetDomain in targetDomains)
        {
            string bindingsContainer = "target" + QvtCodeGeneratorStrings.MatchDomainClassName(targetDomain);

        
        #line default
        #line hidden
        
        #line 307 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 308 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(targetDomain), bindedSoFar, bindingsContainer)));

        
        #line default
        #line hidden
        
        #line 308 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 309 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        }

        // Generating relation calls from where clause
        if (relation.Where != null)
        {

        
        #line default
        #line hidden
        
        #line 315 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" \r\n                // Calling other relations as defined in the where clause\r\n");

        
        #line default
        #line hidden
        
        #line 317 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

            foreach (IRelationCallExp relationCall in relation.Where.Predicate.Select(p => p.ConditionExpression).OfType<IRelationCallExp>())
            {

        
        #line default
        #line hidden
        
        #line 320 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                ");

        
        #line default
        #line hidden
        
        #line 321 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateExpression(relationCall, useMetamodelInterface) + ";"));

        
        #line default
        #line hidden
        
        #line 321 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 322 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

            } // foreach
        } // if

        
        #line default
        #line hidden
        
        #line 325 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            }\r\n        }\r\n");

        
        #line default
        #line hidden
        
        #line 328 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

    } // end method GenerateEnforceMethod

// *** GenerateCheckMethod() *********************************************************************************************************************

	public void GenerateCheckMethod(IRelation relation, RelationAnalysisResult analysisResult)
	{
        int indentTabs = 3;
	    ISet<IVariable> bindedSoFar = new HashSet<IVariable>();

	    // Check method declaration

        
        #line default
        #line hidden
        
        #line 339 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("        internal static ISet<");

        
        #line default
        #line hidden
        
        #line 340 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 340 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> ");

        
        #line default
        #line hidden
        
        #line 340 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckMethodName()));

        
        #line default
        #line hidden
        
        #line 340 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 340 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateRelationParamsCheckonly(true, relation, bindedSoFar)));

        
        #line default
        #line hidden
        
        #line 340 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 342 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

            // result return value

        
        #line default
        #line hidden
        
        #line 344 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            ISet<");

        
        #line default
        #line hidden
        
        #line 345 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 345 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> result = new HashSet<");

        
        #line default
        #line hidden
        
        #line 345 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 345 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(">();\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 347 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	    // Generating the calls to each check domain method
	    foreach (RelationDomain checkonlyDomain in relation.Domain.OfType<RelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && (d.TypedModel != null)))
	    {

        
        #line default
        #line hidden
        
        #line 351 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            ISet<");

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("> ");

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("s = ");

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckDomainMethodName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(checkonlyDomain.RootVariable.Name));

        
        #line default
        #line hidden
        
        #line 352 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 353 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	    } // foreach 1

	    List<IRelationDomain> checkonlyDomains = relation.Domain.OfType<IRelationDomain>().Where(d => !d.IsEnforceable.GetValueOrDefault() && 
                                                                                                      (d.TypedModel != null)).ToList();

	    // Generating beginning of one foreach loop per set of of matches of each domain
	    foreach (IRelationDomain checkonlyDomain in checkonlyDomains)
	    { // foreach 2
            indentTabs++;

        
        #line default
        #line hidden
        
        #line 363 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n            foreach (");

        
        #line default
        #line hidden
        
        #line 365 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainClassName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 365 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 365 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 365 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" in ");

        
        #line default
        #line hidden
        
        #line 365 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 365 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("s)\r\n            {\r\n");

        
        #line default
        #line hidden
        
        #line 367 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	    } // foreach 2

	    // We have to keep track of the number of conditionnals (ie "if(){" )we start from now on
	    int nbConditionals = 0;

	    // Generate tests that variables common to different domains are equal
	    List<IRelationDomain> orderedCheckonlyDomains = checkonlyDomains.ToList();

	    foreach (IRelationDomain checkonlyDomain1 in orderedCheckonlyDomains)
	    {
	        int startIndex = orderedCheckonlyDomains.IndexOf(checkonlyDomain1) + 1;
	        int nbRemaining = orderedCheckonlyDomains.Count - startIndex;

	        foreach (IRelationDomain checkonlyDomain2 in orderedCheckonlyDomains.GetRange(startIndex, nbRemaining))
	        {
	            ISet<IVariable> commonBindedVariables =
	                new HashSet<IVariable>(analysisResult.GetResultOf(checkonlyDomain1).VariablesItCanBind);

	            ISet<IVariable> binded2 =
	                new HashSet<IVariable>(analysisResult.GetResultOf(checkonlyDomain2).VariablesItCanBind);
	            
				commonBindedVariables.IntersectWith(binded2);

	            List<string> conditions = new List<string>();
	            foreach (IVariable commonBindedVariable in commonBindedVariables)
	            {
	                conditions.Add(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain1) + "." 
                                   + commonBindedVariable.Name + "==" + QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain2) 
                                   + "." + commonBindedVariable.Name);
	            }
	            if (conditions.Any())
	            {

        
        #line default
        #line hidden
        
        #line 400 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                    if (");

        
        #line default
        #line hidden
        
        #line 401 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" && ", conditions)));

        
        #line default
        #line hidden
        
        #line 401 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(")\r\n\t\t\t\t\t{\r\n");

        
        #line default
        #line hidden
        
        #line 403 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	                nbConditionals++;
	            }
	        }
	    }

	    // At this point all the variables have been compared and are hence valid. 
        // We can generate code to extract them from the domains.
	    foreach (IRelationDomain checkonlyDomain in checkonlyDomains)
	    {

        
        #line default
        #line hidden
        
        #line 414 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(RelationTemplateHelper.GenerateExtractVariablesFromMatch(analysisResult.GetResultOf(checkonlyDomain), 
                                                                     bindedSoFar, 
                                                                     QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain),
                                                                     indentTabs: indentTabs)));

        
        #line default
        #line hidden
        
        #line 419 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 420 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	    }

	    // Finally we can generate tests for csharp constraints that require such variables
	    // TODO test that all the required variables are indeed provided, before using them (otherwise compilation error, probably)
	    foreach (IRelationDomain checkonlyDomain1 in orderedCheckonlyDomains)
	    {
	        ICollection<IPropertyTemplateItem> propertyTemplateItemsRequiringVariables =
	            analysisResult.GetResultOf(checkonlyDomain1).IPropertyTemplateItemToVariablesRequired.Keys;

	        List<string> conditions = new List<string>();
	        
            foreach (IPropertyTemplateItem propertyTemplateItemRequiringVariable in propertyTemplateItemsRequiringVariables)
	        {
	            string containerVar = propertyTemplateItemRequiringVariable.ObjContainer.BindsTo.Name;
	            string property = propertyTemplateItemRequiringVariable.ReferredProperty.Name;
	            conditions.Add(containerVar + "." + property + " == (" + RelationTemplateHelper.GenerateExpression(propertyTemplateItemRequiringVariable.Value, true) + ")");
	        }

	        if (conditions.Any())
	        {

        
        #line default
        #line hidden
        
        #line 441 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                if(");

        
        #line default
        #line hidden
        
        #line 442 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" && ", conditions)));

        
        #line default
        #line hidden
        
        #line 442 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(") {\r\n");

        
        #line default
        #line hidden
        
        #line 443 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	            nbConditionals++;
	        }
	    }

	    // Generate code to create a "CheckonlyMatch" object

        
        #line default
        #line hidden
        
        #line 449 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                ");

        
        #line default
        #line hidden
        
        #line 450 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 450 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" checkonlysMatch = new ");

        
        #line default
        #line hidden
        
        #line 450 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.CheckResultClassName(relation)));

        
        #line default
        #line hidden
        
        #line 450 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("()\r\n                {\r\n");

        
        #line default
        #line hidden
        
        #line 452 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

		foreach (IRelationDomain checkonlyDomain in checkonlyDomains)
		{

        
        #line default
        #line hidden
        
        #line 455 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                    ");

        
        #line default
        #line hidden
        
        #line 456 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 456 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 456 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(QvtCodeGeneratorStrings.MatchDomainFieldName(checkonlyDomain)));

        
        #line default
        #line hidden
        
        #line 456 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write(",\r\n");

        
        #line default
        #line hidden
        
        #line 457 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

        }

        
        #line default
        #line hidden
        
        #line 459 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("                };\r\n\r\n                result.Add(checkonlysMatch);\r\n");

        
        #line default
        #line hidden
        
        #line 463 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"


		for (int i = 0; i < nbConditionals; i++)
		{

        
        #line default
        #line hidden
        
        #line 467 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("              } // End if\r\n");

        
        #line default
        #line hidden
        
        #line 469 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

		}

		foreach (IRelationDomain _ in checkonlyDomains)
		{

        
        #line default
        #line hidden
        
        #line 474 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("            }\r\n");

        
        #line default
        #line hidden
        
        #line 476 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

		} // foreach

        
        #line default
        #line hidden
        
        #line 478 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"
this.Write("\r\n            return result;\r\n        }\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 483 "C:\work\QvtCodeGenerator-dev\src\LL.MDE.Components.Qvt.CodeGenerator\CodeGeneration\RelationTemplate\RelationHelperTemplate.tt"

	} // end method

// ************************************************************************************************************************

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class RelationMainTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
