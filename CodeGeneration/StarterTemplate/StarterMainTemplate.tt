<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="LL.MDE.Components.Qvt.Common" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.CustomExtensions.EMOFExtensions" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.CustomExtensions.QVTRelationExtensions" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.EMOF" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.EMOFExtensions" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.EssentialOCL" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTBase" #>
<#@ import namespace="LL.MDE.Components.Qvt.Metamodel.QVTRelation" #>
<#@ import namespace="LL.MDE.Components.Qvt.CodeGenerator.CodeGeneration" #>
<#@ import namespace="LL.MDE.Components.Qvt.CodeGenerator.CodeGeneration.RelationTemplate" #>
<#@ import namespace="NMF.Utilities" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// generated code
using LL.MDE.Components.Qvt.Common;

<#= QvtCodeGeneratorStrings.Namespace(Transformation) #> 
{
    public class TransformationStarter : AbstractTransformationStarter
    {
        public TransformationStarter(TransformationDescriptor descriptor) : base(descriptor) 
        { 
        }

        public override void StartTransformation()
        {
            ReflectiveMetamodelInterface reflectiveMetamodelInterface = new ReflectiveMetamodelInterface();

            <#=QvtCodeGeneratorStrings.TransformationName(Transformation) #> transformation = new <#=QvtCodeGeneratorStrings.TransformationName(Transformation) #>(reflectiveMetamodelInterface);


<# 
    foreach (IRelation relation in Transformation.Rule.OfType<IRelation>().Where(r => r.IsTopLevel.GetValueOrDefault(false)))
    { 
#>
            transformation.<#= relation.Name #>(<#=  string.Join(", ", relation.Domain.OfType<IRelationDomain>().Select(
    d => "(" + d.RootVariable.Type.GetRealTypeName() + ")TransformationDescriptor.Parameters[" + relation.Domain.IndexOf(d) + "].ParameterInstance")) #>);
            
<#
    } // foreach 
#>
            
        }
    }
}